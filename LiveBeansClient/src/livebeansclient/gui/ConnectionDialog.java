/*
 * The MIT License
 *
 * Copyright 2016 Luke Dawkes.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package livebeansclient.gui;

import java.awt.Color;
import java.awt.Frame;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import livebeansclient.LiveBeansClient;
import livebeansclient.swingworkers.ConnectWorker;

/**
 *
 * @author Luke Dawkes
 */
public class ConnectionDialog extends javax.swing.JDialog
{

    private final LiveBeansClient _clientInstance;
    private static ConnectionDialog _instance;

    public static ConnectionDialog getInstance()
    {
        if (_instance == null)
        {
            _instance = new ConnectionDialog(new JFrame(), true);
        }

        return _instance;
    }

    /**
     * Creates new form ConnectionDialog
     */
    private ConnectionDialog(Frame parent, boolean modal)
    {
        super(parent, modal);
        initComponents();

        txtClientName.setText("");
        txtServerIP.setText("");
        _clientInstance = LiveBeansClient.getInstance();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        btnConnect = new javax.swing.JButton();
        lblClientName = new javax.swing.JLabel();
        lblServerIP = new javax.swing.JLabel();
        txtClientName = new javax.swing.JTextField();
        txtServerIP = new javax.swing.JFormattedTextField();
        lblClientInfo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(ConnectionDialog.class, "ConnectionDialog.title")); // NOI18N
        setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        setPreferredSize(new java.awt.Dimension(260, 130));
        setResizable(false);
        setSize(new java.awt.Dimension(260, 130));

        btnConnect.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnConnect, org.openide.util.NbBundle.getMessage(ConnectionDialog.class, "ConnectionDialog.btnConnect.text")); // NOI18N
        btnConnect.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnConnectActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(lblClientName, org.openide.util.NbBundle.getMessage(ConnectionDialog.class, "ConnectionDialog.lblClientName.text")); // NOI18N
        lblClientName.setToolTipText(org.openide.util.NbBundle.getMessage(ConnectionDialog.class, "ConnectionDialog.lblClientName.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lblServerIP, org.openide.util.NbBundle.getMessage(ConnectionDialog.class, "ConnectionDialog.lblServerIP.text")); // NOI18N

        txtClientName.setText(org.openide.util.NbBundle.getMessage(ConnectionDialog.class, "ConnectionDialog.txtClientName.text")); // NOI18N

        txtServerIP.setText(org.openide.util.NbBundle.getMessage(ConnectionDialog.class, "ConnectionDialog.txtServerIP.text")); // NOI18N

        lblClientInfo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(lblClientInfo, org.openide.util.NbBundle.getMessage(ConnectionDialog.class, "ConnectionDialog.lblClientInfo.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnConnect, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblClientName)
                            .addComponent(lblServerIP))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtClientName)
                            .addComponent(txtServerIP)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblClientInfo)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblClientName)
                    .addComponent(txtClientName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblServerIP)
                    .addComponent(txtServerIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnConnect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblClientInfo)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnConnectActionPerformed
    {//GEN-HEADEREND:event_btnConnectActionPerformed
        if (_clientInstance.isConnected())
        {
            _clientInstance.disconnectFromServer();
            _clientInstance.displayDialog("Disconnected", "Successfully disconnected from server", JOptionPane.INFORMATION_MESSAGE);
            refreshUI();
        }
        else if (txtServerIP.getText().trim().equals("") || txtClientName.getText().trim().equals(""))
        {
            _clientInstance.displayDialog("Not Enough Information", "You must provide a Name and the Server IP", JOptionPane.WARNING_MESSAGE);
        }
        else
        {
            setInfo("Connecting...", Color.YELLOW);
            setClickables(false);

            ConnectWorker connectWorker = new ConnectWorker(txtClientName.getText(), txtServerIP.getText());
            connectWorker.execute();
        }
    }//GEN-LAST:event_btnConnectActionPerformed

    public void refreshUI()
    {
        boolean clientConnected = _clientInstance.isConnected();
        String buttonText = clientConnected ? "Disconnect" : "Connect";

        btnConnect.setText(buttonText);
        txtClientName.setEnabled(!clientConnected);
        txtServerIP.setEnabled(!clientConnected);
    }

    public void setInfo(String newInfo, Color newColour)
    {
        lblClientInfo.setForeground(newColour);
        lblClientInfo.setText(newInfo);
    }

    public void setClickables(boolean enabled)
    {
        txtClientName.setEnabled(enabled);
        txtServerIP.setEnabled(enabled);
        btnConnect.setEnabled(enabled);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JLabel lblClientInfo;
    private javax.swing.JLabel lblClientName;
    private javax.swing.JLabel lblServerIP;
    private javax.swing.JTextField txtClientName;
    private javax.swing.JFormattedTextField txtServerIP;
    // End of variables declaration//GEN-END:variables
}
